// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum AddressType {
  INVOICE
  DELIVERY
}

model Address {
  id          Int     @id @default(autoincrement())
  firstName   String?
  lastName    String?
  street      String?
  houseNumber String?
  zipCode     String?
  city        String?
  phoneNumber String?
  countryId   Int
  country     Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  addressType AddressType

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  currentAddress Boolean
}

model ProductType {
  id   Int    @id @default(autoincrement())
  name String

  products Product[]
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  firstName            String?
  lastName             String?
  password             String
  orders               Order[]
  shoppingCartProducts ShoppingCartProduct[]
  addresses            Address[]
}

model Admin {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  userName String?
  password String
}

model Country {
  id   Int    @id @default(autoincrement())
  name String
  code String

  addressess Address[]
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

model Order {
  id     Int         @id @default(autoincrement())
  status OrderStatus @default(PENDING)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  totalPrice    Decimal @default(0) @db.Decimal(12, 4)
  totalQuantity Int?    @default(0)

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderlines Orderline[]
  extraCosts ExtraCost[]
}

model Orderline {
  id       Int     @id @default(autoincrement())
  quantity Int
  orderId  Int
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  price    Decimal @db.Decimal(12, 4)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String?
  price                Decimal               @db.Decimal(12, 4)
  stock                Int                   @default(0)
  totalStock           Int                   @default(0)
  orderlines           Orderline[]
  shoppingCartProducts ShoppingCartProduct[]

  productTypeId Int
  productType   ProductType @relation(fields: [productTypeId], references: [id], onDelete: Cascade)

  brandId Int?
  brand   Brand? @relation(fields: [brandId], references: [id], onDelete: Cascade)

  productSellers ProductSeller[]
  productColors ProductColor[]
}

model ExtraCostType {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  price       Decimal @db.Decimal(12, 4)

  extraCosts ExtraCost[]
}

model ExtraCost {
  id Int @id @default(autoincrement())

  extraCostTypeId Int
  extraCostType   ExtraCostType @relation(fields: [extraCostTypeId], references: [id], onDelete: Cascade)

  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ShoppingCartProduct {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity Int

  @@unique([userId, productId])
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String

  products Product[]
}

model Seller {
  id   Int    @id @default(autoincrement())
  name String

  productSellers ProductSeller[]
}

model ProductSeller {
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  sellerId Int
  seller   Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@id([sellerId, productId])
}

model Color {
  id   Int    @id @default(autoincrement())
  name String

  code String

  productColors ProductColor[]

}

model ProductColor {
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  colorId Int
  color   Color @relation(fields: [colorId], references: [id], onDelete: Cascade)

  @@id([productId, colorId])
}
